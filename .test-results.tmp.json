{
    "lib/defer": {
        "resolves the promise to the value passed to resolve": {
            "log": [],
            "time": 2,
            "status": "PASSED",
            "noExpectationsWarning": false
        },
        "does not resolve or catch with no interaction": {
            "log": [],
            "time": 6,
            "status": "PASSED",
            "noExpectationsWarning": false
        },
        "rejects the promise to the value passed to reject": {
            "log": [],
            "time": 0,
            "status": "PASSED",
            "noExpectationsWarning": false
        }
    },
    "lib/components/Toggle": {
        "renders active when set to true": {
            "log": [],
            "time": 0,
            "status": "PASSED",
            "noExpectationsWarning": false
        },
        "renders child content": {
            "log": [],
            "time": 1,
            "status": "PASSED",
            "noExpectationsWarning": false
        },
        "renders active when set to false": {
            "log": [],
            "time": 3,
            "status": "PASSED",
            "noExpectationsWarning": false
        },
        "clicking a non-actve toggle requests it to become active": {
            "log": [],
            "time": 3,
            "status": "PASSED",
            "noExpectationsWarning": false
        },
        "clicking a actve toggle requests it to become non-active": {
            "log": [],
            "time": 3,
            "status": "PASSED",
            "noExpectationsWarning": false
        }
    },
    "lib/shallowResolveObject": {
        "fails the resolve if one of the functions rejects": {
            "log": [],
            "time": 0,
            "status": "PASSED",
            "noExpectationsWarning": false
        },
        "resovles all of the sub-requests into an object": {
            "log": [],
            "time": 1,
            "status": "PASSED",
            "noExpectationsWarning": false
        }
    },
    "lib/ImmutableMixin": {
        "_getInImmutable": {
            "gets the value using a simple key": {
                "log": [],
                "time": 0,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_hasInImmutable": {
            "returns true when the key exists": {
                "log": [],
                "time": 1,
                "status": "PASSED",
                "noExpectationsWarning": false
            },
            "returns false when the tree doesn't exist": {
                "log": [],
                "time": 1,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_hasFromImmutable": {
            "returns true when the key exists": {
                "log": [],
                "time": 1,
                "status": "PASSED",
                "noExpectationsWarning": false
            },
            "returns false when the tree doesn't exist": {
                "log": [],
                "time": 1,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_lastFromImmutable": {
            "returns the last element of the list": {
                "log": [],
                "time": 2,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_firstFromImmutable": {
            "returns the first element of the list": {
                "log": [],
                "time": 0,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_toArrayFromImmutable": {
            "shallowly converts the list to an array": {
                "log": [],
                "time": 1,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_toObjectFromImmutable": {
            "shallowly converts the list to an array": {
                "log": [],
                "time": 0,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_toJSFromImmutable": {
            "deeply convers the object ot javascript primitives": {
                "log": [],
                "time": 1,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        },
        "_getFromImmutable": {
            "gets the value using a simple key": {
                "log": [],
                "time": 2,
                "status": "PASSED",
                "noExpectationsWarning": false
            }
        }
    }
}